type Course @model {
    id: ID!
    courseOwnerId: String!
    courseOwnerUsername: String!
    courseTitle: String!
    courseBody: String!
    courseStart: String
    courseEnd: String
    caponnumberofcollaborators: Boolean
    createdAt: String
    numberofstudents: Int!
    task: [Task] @connection(name: "CourseTasks")
    groups: [Groups] @connection(name: "CourseGroups")

}

type Task @model {
    id: ID!
    taskOwnerId: String!
    taskOwnerUsername: String!
    taskTitle: String!
    taskBody: String!
    taskcontent: String!
    numberofQuestions: Int
    questions: [Question] @connection(name: "TaskQuestions") #relationship
    course: Course @connection(name: "CourseTasks")
    createdAt: String!
}

type Question @model {
    id: ID!
    qOwnerId: String!
    qOwnerUsername: String!
    qTitle: String!
    task: Task @connection(name: "TaskQuestions")
    createdAt: String

}

type Groups @model {
    id: ID!
    groupOwnerId: String!
    groupOwnerUsername: String!
    numberofStudents: Int!
    averagemark: Float
    course: Course @connection(name: "CourseGroups")


}
